#!/bin/sh
# Copyright (c) 2015 The crouton Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This script uses amixer to present an interface similar to the
# brightness script for crouton.

set -e
set -u

DEFAULT_VOLUME_DELTA=5

APPLICATION="${0##*/}"
USAGE="$APPLICATION [set] [0-100]
$APPLICATION up|down [0-100]
$APPLICATION mute [set|unset|toggle]

This script changes the volume of the current output
device, as would changing it with the shortcut keys or
with the GUI in Chrome OS.

Shortcut invocations:
    $APPLICATION up     increases by $DEFAULT_VOLUME_DELTA
    $APPLICATION down   decreases by $DEFAULT_VOLUME_DELTA
    $APPLICATION mute   sets muted
    $APPLICATION 0-100  sets volume to given value
"
# The control which controls the current output.
ALSA_CONTROL="Master"

# Tiny sugar coating around amixer for common parameters.
_amixer() {
    amixer -Dcras "$@"
}

set_volume() {
    local volume="$1"
    _amixer -q sset $ALSA_CONTROL "$volume"
}

get_is_muted() {
    # Get the alsa state of the control.
    local state="$(_amixer cget "name=$ALSA_CONTROL Playback Switch" | sed -n \
        -e "/[[:space:]]\+:/s/.*=//p")"
    #       ^              ^      ^ Print the line.
    #       ^              ^ Replace everything before the equal sign.
    #       ^ Search for the line with spaces and a colon (the value).

    # Muted is off (control is off)
    if [ "$state" = "on" ]; then
        # Is not muted, so is_muted is false
        return 1
    else
        # Is muted, so is_muted is true
        return 0
    fi
}

toggle_mute() {
    _amixer -q sset $ALSA_CONTROL toggle
}

mute() {
    _amixer -q sset $ALSA_CONTROL mute
}
unmute() {
    _amixer -q sset $ALSA_CONTROL unmute
}

relative_volume() {
    local delta="$1"
    if get_is_muted; then
        if [ "$delta" -lt 0 ]; then
            set_volume 0
        fi
        unmute
    else
        # Is the volume going down or up?
        if [ "$delta" -lt 0 ]; then
            # Down, then we need to make that number positive
            : $(( delta=delta * -1 ))
            # And suffix the minus sign.
            set_volume "${delta}-"
        else
            # Only suffix the plus sign.
            set_volume "${delta}+"
        fi
    fi
}

print_help() {
    # Prints the usage message.
    # Can also get a message to show first.
    [ $# -gt 0 ] && echo "$@"
    echo "$USAGE"
}

if [ $# -lt 1 ]; then
    print_help "Error: $APPLICATION needs at least a command." 1>&2
    exit 1
fi

cmd="$1"
shift

case "$cmd" in
h*|-h*|--help)
    print_help
    ;;
up)
    relative_volume "${1-$DEFAULT_VOLUME_DELTA}"
    ;;
down)
    relative_volume "-${1-$DEFAULT_VOLUME_DELTA}"
    ;;
mute)
    action="${1-set}"
    case "$action" in
    "toggle")
        toggle_mute
        ;;
    set)
        mute
        ;;
    unset)
        unmute
        ;;
    *)
        print_help "Invalid action: $action for mute." 1>&2
        exit 1
        ;;
    esac
    ;;
set|[0-9]|[0-9][0-9]|100)
    amount="$cmd"
    # First, check that we received a value to set the volume to.
    if [ $# -eq 0 ] && [ "$cmd" = "set" ]; then
        print_help "Error: $APPLICATION set needs an amount to set." 1>&2
        exit 1
    fi
    # The value /could/ have been a parameter or the command itself.
    if [ $# -gt 0 ]; then
        amount="$1"
        shift
    fi
    # Check that this is integer-ish enough.
    if ! [ "$amount" -eq "$amount" ] 2>/dev/null; then
        print_help "Error: $APPLICATION set needs a number [0-100]" 1>&2
        exit 1
    fi
    set_volume "$amount"
    ;;
*)
    print_help "Error: Unkown command $cmd" 1>&2
    exit 1
    ;;
esac
