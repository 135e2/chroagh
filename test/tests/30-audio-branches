#!/bin/sh -e
# Copyright (c) 2014 The crouton Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# For a single release, check if the audio target can compile a number of recent
# ADHD branches (release-*, stabilize-* and master branch).

# FIXME: This test is now irrelevant since we can test on multiple channels

if [ -z "$release" ]; then
    echo "default"
    exit 0
fi

# Note: This assumes that branches are sorted alphabetically, and therefore
# release branches appear before stabilize ones.
# We match recent release-* branches, then stabilize-* branches ahead of the
# latest release branch, and finally master.
ADHD_HEADS="`wget --no-check-certificate --quiet -O- \
'https://chromium.googlesource.com/chromiumos/third_party/adhd/+refs/heads?format=TEXT' \
    | awk '
    BEGIN {
        # Do not test any release before R31 (stable as of 2013-12-10)
        minrel=31
    }
    $2 ~ /.*release-R[0-9]+-[0-9]+/ {
        split($2, s, /[-\.]R?/)
        if (s[2] >= minrel) {
           print $2
           minstab=s[3]
        }
    }
    minstab && $2 ~ /.*stabilize-[0-9]+/ {
        split($2, s, /[-\.]/)
        if (s[2] > minstab) {
           print $2
        }
    }
    END {
        print "master"
    }
'`"

echo "Testing ADHD heads: $ADHD_HEADS." | tr '\n' ' ' | log

for ADHD_HEAD in $ADHD_HEADS; do
    # Generate CROS_VER_1 based on branch name
    CROS_VER_1="${ADHD_HEAD#*stabilize-}"
    CROS_VER_1="${CROS_VER_1#*release-R??-}"
    CROS_VER_1="${CROS_VER_1%%.*}"
    if [ "$ADHD_HEAD" = "master" ]; then
        CROS_VER_1=999999
    elif [ "$((CROS_VER_1+0))" != "$CROS_VER_1" ]; then
        log "Cannot detect Chromium OS version from branch name '$ADHD_HEAD'"
        fails true
    fi
    snapshot "$release" core
    echo "
ADHD_HEAD='$ADHD_HEAD'
CROS_VER_1='$CROS_VER_1'
    " | crouton -T -u -n "$release" -t audio
    host delete-chroot -y "$release"
done
