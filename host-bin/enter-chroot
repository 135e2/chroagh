#!/bin/sh -e
# Copyright (c) 2012 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

APPLICATION="${0##*/}"
BACKGROUND=''
CHROOTS="`readlink -f "\`dirname "$0"\`/../chroots"`"
NAME=''
USERNAME='1000'
NOLOGIN=''

USAGE="$APPLICATION [options] [command [args...]]

Enters an installed Debian-based chroot for running alongside Chromium OS.

By default, it will log into the primary user on the first chroot found.
You can specify a command and parameters to run instead of an interactive shell.

Options:
    -b          Fork and run the specified command silently in the background.
    -c CHROOTS  Directory the chroots are in. Default: $CHROOTS
    -n NAME     Name of the chroot to enter. Default: first one found in CHROOTS
    -u USERNAME Username (or UID) to log into. Default: 1000 (the primary user)
    -x          Does not log in, but directly executes the command instead.
                Note that the environment will be empty (sans TERM)."

# Function to exit with exit code $1, spitting out message $@ to stderr
error() {
    local ecode="$1"
    shift
    echo "$*" 1>&2
    exit "$ecode"
}

# Process arguments
while getopts 'bc:n:u:x' f; do
    case "$f" in
    b) BACKGROUND='-y';;
    c) CHROOTS="$OPTARG";;
    n) NAME="$OPTARG";;
    u) USERNAME="$OPTARG";;
    x) NOLOGIN='y';;
    \?) error 2 "$USAGE";;
    esac
done
shift "$((OPTIND-1))"

# We need to run as root
if [ ! "$USER" = root -a ! "$UID" = 0 ]; then
    error 2 "$APPLICATION must be run as root."
fi

# We need a command if we specified to run in the background
if [ -n "$BACKGROUND" -a $# = 0 ]; then
    error 2 "A command must be specified in order to run in the background."
fi

# Select the first chroot available if one hasn't been specified
if [ -z "$NAME" ]; then
    for CHROOT in "$CHROOTS"/*; do
        for encfile in "$CHROOT/ECRYPTFS_FNEK_ENCRYPTED"*; do
            if [ -r "$encfile" ]; then
                NAME="${CHROOT##*/}"
                NAME="${CHROOT%:ecryptfs=*}"
                break
            fi
        done
        if [ -z "$NAME" -a -d "$CHROOT/etc" ]; then
            NAME="${CHROOT##*/}"
            break
        fi
    done
    if [ -z "$NAME" ]; then
        error 1 "No chroots found in $CHROOTS"
    fi
fi

# Make sure we always exit with echo on the tty.
TRAP="stty echo 2>/dev/null || true;$TRAP"
trap "$TRAP" INT HUP 0

# Mount the chroot and update our CHROOT path
CHROOT="`sh -e "\`dirname "$0"\`/mount-chroot" -p -c "$CHROOTS" "$NAME"`"

# Auto-unmount everything below and including the chroot when the script exits.
TRAP="sh -e \"`dirname "$0"`/unmount-chroot\" \
                                $BACKGROUND -c \"$CHROOTS\" \"$NAME\";$TRAP"
trap "$TRAP" INT HUP 0

# Offer to run /prepare.sh if it exists and yet we're logging in.
if [ -z "$NOLOGIN" -a -f "$CHROOT/prepare.sh" ]; then
    echo 'A chroot preparation script still exists inside the chroot.' 1>&2
    echo 'The chroot may not be fully set up.' 1>&2
    response=''
    if tty -s; then
        echo -n 'Would you like to finish the setup? [Y/n] ' 1>&2
        read response
    fi
    if [ -z "$response" -o ! "${response#[Yy]}" = "$response" ]; then
        echo 'Preparing chroot environment...' 1>&2
        "$0" -c "$CHROOTS" -n "$NAME" -x '/prepare.sh'
        echo 'Setup completed. Entering chroot...' 1>&2
    else
        echo 'Skipping setup. You will be prompted again next time.' 1>&2
    fi
fi

# Resolve USERNAME if it is a UID (and we're logging in)
if [ -z "$NOLOGIN" ]; then
    case "$USERNAME" in
    ''|*[!0-9]*)
        # Make sure the username exists
        if ! grep -q "^$USERNAME:" "$CHROOT/etc/passwd"; then
            error 1 "User $USERNAME not found in $NAME"
        fi;;
     *) 
        # Resolve the UID
        uid="$USERNAME"
        USERNAME="`awk -F: '$3=='"$uid"'{print $1}' "$CHROOT/etc/passwd"`"
        if [ -z "$USERNAME" ]; then
            error 1 "UID $uid not found in $NAME"
        fi
    esac
    # Detect the home directory for the user
    CHROOTHOME="`awk -F: '$1=="'"$USERNAME"'"{print $6}' "$CHROOT/etc/passwd"`"
fi

# Ensure the chroot is executable and writable
mp="$CHROOT"
while ! mountpoint -q "$mp"; do
    mp="${mp%/*}"
    [ -z "$mp" ] && mp=/
done
if grep -q "^[^ ]* $mp [^ ]* [^ ]*\(noexec\|nodev\|nosuid\)" /proc/mounts; then
    mount -o remount,rw,dev,exec,suid "$mp"
fi

# Copy Xauthority if the chroot requests
chrootxauth="$CHROOT/etc/X11/host-Xauthority"
if [ -f "$chrootxauth" ]; then
    # Copy the latest Xauthority into the chroot
    cp -f "$XAUTHORITY" "$chrootxauth"
    chmod 444 "$chrootxauth"
fi

# Prepare chroot filesystem
# Soft-link resolv.conf so that updates are automatically propagated
mkdir -p "$CHROOT/etc/host-shill"
ln -sf 'host-shill/resolv.conf' "$CHROOT/etc/resolv.conf"

# Bind-mounts $1 into $CHROOT/${2:-"$1"} if $2 is not already mounted
bindmount() {
    local target="`readlink -f "$CHROOT/${2:-"$1"}"`"
    if ! grep -q "^[^ ]* $target " /proc/mounts; then
        mount --bind "$1" "$target"
    fi
}
bindmount /dev
bindmount /dev/pts
bindmount /dev/shm
bindmount /sys
bindmount /sys/fs/fuse/connections
bindmount /tmp
bindmount /proc
bindmount /var/run/shill /etc/host-shill

# Bind-mount ~/Downloads if we're logged in as a user
localdownloads='/home/chronos/user/Downloads'
if [ -z "$NOLOGIN" -a -n "$CHROOTHOME" -a -d "$localdownloads" ]; then
    mkdir -p "$CHROOT/$CHROOTHOME/Downloads"
    bindmount "$localdownloads" "$CHROOTHOME/Downloads"
fi

# Disable screen dimming (TODO: create script to poke it instead)
if [ -z "$DISABLE_POWERD_CONTROL" ]; then
    if initctl stop powerd 2>/dev/null; then
        TRAP="initctl start powerd;$TRAP"
        trap "$TRAP" INT HUP 0
    else
        DISABLE_POWERD_CONTROL=1
    fi
fi

# To run silently, we override the env command to launch a background process,
# and move the trap code to happen there.
if [ -n "$BACKGROUND" ]; then
    env() {
        (
            trap '' INT HUP
            trap "$TRAP" 0
            /usr/bin/env "$@"
        ) </dev/null >/dev/null 2>/dev/null &
    }
fi

# Start the chroot and any specified command
ret=0
if [ -n "$NOLOGIN" ]; then
    env -i TERM="$TERM" chroot "$CHROOT" "$@" || ret=$?
elif [ $# = 0 ]; then
    env -i TERM="$TERM" chroot "$CHROOT" su - "$USERNAME" || ret=$?
else
    # Escape out the command
    cmd=''
    for param in "$@"; do
        cmd="$cmd\"$param\" "
    done
    env -i TERM="$TERM" chroot "$CHROOT" su -c "$cmd" - "$USERNAME" || ret=$?
fi

# We don't want to trap for this proccess if we're running in the background
if [ -n "$BACKGROUND" ]; then
    trap - INT HUP 0
fi

# Cleanup all happens in the exit trap
exit $ret
