#!/bin/sh -e
# Copyright (c) 2014 The crouton Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a distro-specific continuation of the prepare.sh script.

PKGEXT='tar.xz'
DISTROAKA='arch'

# Detect if multilib repositories are installed
arch_multilib() {
    pacman -Sl multilib >/dev/null 2>&1
}

# install_dist: see install() in prepare.sh for details.
# We ignore the second part of the parameters, as Arch only pulls required deps.
# We also replace gcc by its multilib version, if the multilib repository is
# enabled.
install_dist() {
    local pkgs='' params='' multilib=''
    if arch_multilib; then
        multilib='y'
    fi
    while [ "$#" != 0 ]; do
        if [ "$1" = "--minimal" ]; then
            : # Ignore: irrelevant for arch
        elif [ "$1" = "--asdeps" ]; then
            params="--asdeps"
        else
            break
        fi
        shift
    done
    while [ "$#" != 0 ]; do
        if [ "$1" = '--' ]; then
            shift
            break
        fi
        if [ -n "$multilib" -a "$1" = "gcc" ]; then
            pkgs="$pkgs $1-multilib"
        else
            pkgs="$pkgs $1"
        fi
        shift
    done
    if [ -n "$pkgs" ]; then
        pacman -S --noconfirm --needed $params $pkgs
    fi
}


# install_pkg_dist: see install_pkg() in prepare.sh for details.
install_pkg_dist() {
    local pkgs='' params=''
    local chrootuser="`awk -F: '$3==1000{print $1; exit}' '/etc/passwd'`"
    while [ "$#" != 0 ]; do
        if [ "$1" = "--minimal" ]; then
            : # Ignore: irrelevant for arch
        elif [ "$1" = "--asdeps" ]; then
            params="--asdeps"
        else
            break
        fi
        shift
    done
        while [ "$#" != 0 ]; do
        if [ "$1" = '--' ]; then
            shift
            break
        fi
        pkgs="$pkgs $1"
        shift
    done
    if [ -n "$pkgs" ]; then
        sudo -u $chrootuser pacaur -S --needed --noconfirm $params --noedit $pkgs
    fi
}


# remove_dist: see remove() in prepare.sh for details.
remove_dist() {
    if [ "$#" -gt 0 ]; then
        pacman --noconfirm -R "$@"
    fi
}


# list_uninstalled_dist: see list_uninstalled() in prepare.sh for details.
list_uninstalled_dist() {
    local suffix="$1" pkg
    if [ -n "$suffix" ]; then
        error 1 'list_uninstalled_dist: suffix makes no sense on Arch'
    fi
    shift
    for pkg in "$@"; do
        if ! pacman -Q "$pkg" >/dev/null 2>&1; then
            echo -n "$pkg "
        fi
    done
}

# Run boostrap second stage if it hasn't already happened
bootstrappkglist="/crouton-bootstrap-pkg"
if [ -r "$bootstrappkglist" ]; then

    # Restore the original pacman configuration
    if [ -f /etc/pacman.conf.pacorig ]; then
        mv -f /etc/pacman.conf.pacorig /etc/pacman.conf
    fi

    # Restore the original /etc/resolv.conf
    if [ -f /etc/resolv.conf.pacorig ]; then
        mv -f /etc/resolv.conf.pacorig /etc/resolv.conf
    fi

    # Now install a proper set of base packages

    # Packages that are in base, but that we do not want to install in the
    # chroot (nothing prevents the user from installing them later on)
    # Final space critical for matching
    PACKAGES_TARGET_IGNORE="cronie device-mapper dhcpcd heirloom-mailx \
        jfsutils logrotate lvm2 mdadm netctl pciutils reiserfsprogs \
        systemd-sysvcompat xfsprogs "

    # Only erase mirror if specified (in case pacman fails later on)
    if [ -n "$MIRROR" -a "$MIRROR" != 'unspecified' ]; then
        # Keep a reference of the existing mirrorlist
        mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.pacorig
        echo "Server = $MIRROR" > "/etc/pacman.d/mirrorlist"
    fi

    # Synchronize
    pacman -Sy

    # Build a reasonable set of base packages, using pacman's output as
    # reference, then remove packages in PACKAGES_TARGET_IGNORE.
    allbasepkg="`pacman -Sg base | cut -d' ' -f 2`"

    basepkg=""
    for package in $allbasepkg; do
        # Do not install if blacklisted
        if [ "${PACKAGES_TARGET_IGNORE#*" $package "}" != \
                                          "$PACKAGES_TARGET_IGNORE" ]; then
            continue
        fi

        basepkg="$basepkg $package"
    done
    if [ ! -n "$basepkg" ]; then
        echo "No need to install base packages."
    else
        echo "Installing these base packages:"
        echo "$basepkg"

        pacman --noconfirm --needed -S $basepkg

        # Make sure all these packages are marked as installed explicitly
        pacman -D --asexplicit $basepkg >/dev/null
    fi

    rm -f "$bootstrappkglist"

    # Request a script restart to refresh the mount environment and recreate
    # groups (/etc/group and other files were erased)
    relaunch_setup
fi

# Fix the keyboard mode early on (this will be called again after dist-upgrade).
fixkeyboardmode
