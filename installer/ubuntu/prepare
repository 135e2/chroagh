#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a distro-specific continuation of the prepare.sh script.

PKGEXT='deb'
DISTROAKA='debian'


# install_dist: see install() in prepare.sh for details.
install_dist() {
    local pkgs='' pkgsasdeps='' params='' asdeps='' loop='y'
    while [ -n "$loop" ]; do
        case $1 in
        '--minimal')
            params='--no-install-recommends'
            loop='y'
            shift
            ;;
        '--asdeps')
            asdeps='y'
            loop='y'
            shift
            ;;
        *)
            loop=''
            ;;
        esac
    done
    while [ ! "$#" = 0 ]; do
        if [ "$1" = '--' ]; then
            shift
            break
        fi
        pkgs="$pkgs $1"
        shift
    done
    if [ -n "$asdeps" ]; then
        pkgsasdeps="`list_uninstalled_dist '' $pkgs`"
    fi
    apt-get -y $params install $pkgs `list_uninstalled_dist - "$@"`
    if [ -n "$pkgsasdeps" ]; then
        apt-mark auto $pkgsasdeps
    fi
}


# install_pkg_dist: see install_pkg() in prepare.sh for details.
install_pkg_dist() {
    local params=''
    if [ "$1" = '--minimal' ]; then
        params='--no-install-recommends'
        shift
    fi
    if [ ! "$#" = 0 ]; then
        dpkg --force-depends -i "$@"
    fi
    apt-get -fy $params install
}


# remove_dist: see remove() in prepare.sh for details.
remove_dist() {
    apt-get -y --purge remove "$@"
}


# list_uninstalled_dist: see list_uninstalled() in prepare.sh for details.
# If the package is virtual (e.g. libc-dev), we need to find the binary package
# corresponding to it (e.g. libc6-dev), so that we can remove it afterwards
# ("apt-get remove libc-dev" does not remove libc6-dev).
list_uninstalled_dist() {
    local suffix="$1" pkg
    shift
    for pkg in "$@"; do
        # If $pkg is a binary package, apt-cache returns the package name
        # itself, so $pkg value stays the same.
        # If $pkg is a virtual package, it returns a list of binary packages
        # that are able to provide it. If there is a single match, use that.
        # If not, we still use $pkg, but apt-get will probably fail if we try
        # to install that package.
        realpkg="`apt-cache search --names-only "^$pkg\$" |
                      cut -f 1 -d ' ' | tr '\n' ';'`"
        if [ -n "$realpkg" -a "${realpkg%;*;}" = "$realpkg" ]; then
            pkg="${realpkg%;}"
        fi
        if ! dpkg-query -l "$pkg" 2>/dev/null | grep -q '^[ih]'; then
            echo -n "$pkg$suffix "
        fi
    done
}


# Run debootstrap second stage if it hasn't already happened
if [ -r /debootstrap ]; then
    # Debootstrap doesn't like anything mounted under /sys or /var when it runs
    # We request a re-mount after bootstrapping, so these mounts will be fixed.
    # We also can't detect the mounts properly due to the chroot, so we have to
    # hardcode the mounts.
    umount '/sys/fs/fuse/connections' '/var/run/lock' '/var/run'
    # Our custom /etc/resolv.conf link gets clobbered after bootstrap; save it
    mv -f /etc/resolv.conf /etc/resolv.conf.save
    # Start the bootstrap
    /debootstrap/debootstrap --second-stage
    # Fix the keyboard mode in case it got reverted to raw
    fixkeyboardmode
    # Clean contents of /var/run (since we'll always be mounting over it).
    rm -rf /var/run/*
    # Request a script restart to refresh the mount environment
    relaunch_setup
else
    # Do any pending configuration, in case of an unfortunately-timed Ctrl-C
    dpkg --configure -a

    # Fix the keyboard mode in case it got reverted to raw
    fixkeyboardmode
fi
