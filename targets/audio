#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
REQUIRES='core'
DESCRIPTION='Forward audio to Chromium OS by installing CRAS plugin for ALSA.'
. "${TARGETSDIR:="$PWD"}/common"

### Append to prepare.sh:

# Install CRAS dependencies

install --minimal wget alsa-utils dbus libasound2 libspeexdsp1

install --minimal --asdeps gcc libc-dev pkg-config \
    libdbus-1-dev libasound2-dev libspeexdsp-dev

# SBC is not available in older Debian/Ubuntu: fetch it manually
if [ "$DISTRO" = 'ubuntu' -a \
                "$RELEASE" != 'raring' -a "$RELEASE" != 'saucy' ] ||
   [ "$DISTRO" = 'debian' -a \
                "$RELEASE" != 'jessie' -a "$RELEASE" != 'sid' ]; then
    install_mirror_package 'libsbc1' 'pool/main/s/sbc' '1\.1.*'
    install_mirror_package 'libsbc-dev' 'pool/main/s/sbc' '1\.1.*'
    apt-mark auto libsbc-dev
else
    install --minimal libsbc1
    install --minimal --asdeps libsbc-dev
fi

# Build CRAS from source

CRASBUILDTMP="`mktemp -d crouton-cras.XXXXXX --tmpdir=/tmp`"

addtrap "cd /; rm -rf '$CRASBUILDTMP' 2>/dev/null"

cd "$CRASBUILDTMP"

# Full Chrome OS version (e.g. 4100.86.0)
CROS_VER="`sed -n 's/^CHROMEOS_RELEASE_VERSION=//p' /var/host/lsb-release`"
# Major version (e.g. 4100)
CROS_VER_1="${CROS_VER%%.*}"

# Fetch list of branches from repository
wget --no-check-certificate -O adhd.refs \
    'https://git.chromium.org/chromiumos/third_party/adhd.git/info/refs'

# Prefer release branch (in the form release-R<XX>-<CROS_VER_1>.B)
ADHD_HEAD="`sed -n \
    's|.*\trefs/heads/\(release-R[0-9]*-'"$CROS_VER_1"'\([^0-9].*\)*\)$|\1|p' \
            adhd.refs | sort -V | tail -n 1`"

# Otherwise, find the longest matching stabilize branch
while [ -z "$ADHD_HEAD" ]; do
    ADHD_HEAD="`sed -n \
        's|.*\trefs/heads/\(stabilize-'"$CROS_VER"'\([^0-9].*\)*\)|\1|p' \
                adhd.refs | sort -V | tail -n 1`"
    if [ "$CROS_VER" = "$CROS_VER_1" ]; then
        break
    fi
    CROS_VER="${CROS_VER%.*}"
done

# Fallback on master
ADHD_HEAD="${ADHD_HEAD:-master}"

echo "Fetching adhd (branch $ADHD_HEAD)..." 1>&2

wget --no-check-certificate -O adhd.tar.gz \
'https://gerrit.chromium.org/gitweb/?p=chromiumos/third_party/adhd.git;a=snapshot;h=refs/heads/'"$ADHD_HEAD"';sf=tgz'

tar xf adhd.tar.gz --wildcards 'adhd*/cras/src' --strip 2
cd src

# Directory to install CRAS library/binaries
CRASLIBDIR="/usr/local/lib"
CRASBINDIR="/usr/local/bin"

echo "Compiling CRAS..." 1>&2
# Convert Makefile.am to a shell script, and run it.
{
    echo '
        top_srcdir=".."
        SBC_LIBS="'`pkg-config --libs sbc`'"
        SBC_CFLAGS="'`pkg-config --cflags sbc`'"
        DBUS_LIBS="'`pkg-config --libs dbus-1`'"
        DBUS_CFLAGS="'`pkg-config --cflags dbus-1`'"
    '
    sed -e '
        # Concatenate lines ending in \
        : start; /\\$/{N; b start}
        s/ *\\\n[ \t]*/ /g
        # Convert automake to shell
        s/^[^ ]*:/#\0/
        s/^\t/#\0/
        s/ *= */=/
        s/\([^ ]*\) *+= */\1=${\1}\ /
        s/ /\\ /g
        y/()/{}/
    ' 'Makefile.am'
    echo '
        # buildsources: Build all source files for target
        #  $1: target
        #  $2: additional gcc flags
        # Prints a list of .o files
        buildsources() {
            local target="$1"
            local extragccflags="$2"

            eval local sources=\"\$${target}_SOURCES\"
            eval local cppflags=\"\$${target}_CPPFLAGS\"

            for dep in $sources; do
                if [ "${dep%.c}" != "$dep" ]; then
                    ofile="${dep%.c}.o"
                    gcc -c "$dep" -o "$ofile" $cppflags $extragccflags 1>&2
                    echo "$ofile"
                fi
            done
        }

        # fixlibadd: Fix list of libraries ($1): replace lib<x>.la by -l<x>
        fixlibadd() {
            for libdep in $1; do
                if [ "${libdep%.la}" != "$libdep" ]; then
                    libdep="${libdep%.la}"
                    libdep="-l${libdep#lib}"
                fi
                echo "$libdep"
            done
        }

        # buildlib: Build a library
        #  $1: library name
        #  $2: additional linker flags
        buildlib() {
            local lib="$1"
            local extraflags="$2"
            local ofiles="`buildsources "${lib}_la" "-fPIC -DPIC"`"

            eval local libadd=\"\$${lib}_la_LIBADD\"
            eval local ldflags=\"\$${lib}_la_LDFLAGS\"

            libadd="`fixlibadd "$libadd"`"

            # Detect library version (e.g. 0.0.0)
            local fullver="`echo -n "$ldflags" | \
                sed -n '"'"'y/:/./; s/.*-version-info \([0-9.]*\)$/\\1/p'"'"'`"
            local shortver=""
            # Get "short" library version (e.g. 0)
            if [ -n "$fullver" ]; then
                shortver=".${fullver%%.*}"
                fullver=".$fullver"
            fi
            gcc -shared -fPIC -DPIC $ofiles $libadd -o "$lib.so$fullver" \
               $extraflags -Wl,-soname -Wl,"$lib.so$shortver"
            if [ -n "$fullver" ]; then
                ln -sf $lib.so$fullver $lib.so$shortver
                # Needed at link-time only
                ln -sf $lib.so$shortver $lib.so
            fi
        }

        # buildexe: Build an executable file
        #  $1: executable file name
        #  $2: additional linker flags
        buildexe() {
            local exe="$1"
            local extraflags="$2"
            local ofiles="`buildsources "$exe" ""`"

            eval local ldadd=\"\$${exe}_LDADD\"
            eval local ldflags=\"\$${exe}_LDFLAGS\"

            ldadd="`fixlibadd $ldadd`"

            gcc $ofiles $ldadd -o "$exe" $extraflags
        }

        buildlib libcras

        # Pass -rpath=$CRASLIBDIR to linker, so we do not need to add the
        # directory to ldconfig search path (some distributions do not include
        # /usr/local/lib in /etc/ld.so.conf).
        # We also need to add "-L." as we are not using .la files.
        extraflags="-Wl,-rpath="'"$CRASLIBDIR"'" -L."

        buildlib libasound_module_pcm_cras "$extraflags"
        buildlib libasound_module_ctl_cras "$extraflags"
        buildexe cras_test_client "$extraflags"
    '
} | sh -es

echo "Installing CRAS..." 1>&2

ALSALIBDIR="`pkg-config --variable=libdir alsa`/alsa-lib/"

mkdir -p "$CRASLIBDIR" "$CRASBINDIR" "$ALSALIBDIR"
# Only copy libcras.so.X and libcras.so.X.Y.Z
cp -a libcras.so.* "$CRASLIBDIR"
/usr/bin/install libasound_module_pcm_cras.so "$ALSALIBDIR"
/usr/bin/install libasound_module_ctl_cras.so "$ALSALIBDIR"
/usr/bin/install cras_test_client "$CRASBINDIR"

cd /

TIPSEXTRA=''

# PulseAudio is installed
if which pulseaudio >/dev/null; then
    echo "PulseAudio installed: trying to remove it." 1>&2

    # Try to remove pulseaudio without removing dependencies
    if [ "${DISTROAKA:-"$DISTRO"}" = 'debian' ]; then
        # Check if it is installed manually
        if apt-mark showmanual | grep -q '^pulseaudio$'; then
            TIPSEXTRA=",\nbecause it has been installed manually"
        # Try to remove it: will succeed only if no package requires it
        # (it will still be uninstalled if some packages recommend it)
        elif ! dpkg -P pulseaudio; then
            TIPSEXTRA=",\nbecause some packages depend on it"
        fi
    fi
fi

if which pulseaudio >/dev/null; then
        TIPS="$TIPS
WARNING: PulseAudio is installed in the chroot, and cannot be removed$TIPSEXTRA.
Audio forwarding from the chroot to CRAS (Chromium OS audio server) will not
work.
"
else
    # Make sure PulseAudio does not get installed later on
    if [ "${DISTROAKA:-"$DISTRO"}" = 'debian' ]; then
        cat > /etc/apt/preferences.d/pulseaudio <<EOF
Package: pulseaudio
Pin: release *
Pin-Priority: -1
EOF
    fi

    cat > /etc/asound.conf <<EOF
# Route all audio through the CRAS plugin.
pcm.!default {
        type cras
}
ctl.!default {
        type cras
}
EOF

    TIPS="$TIPS
Audio from the chroot will now be forwarded to CRAS (Chromium OS audio server),
through an ALSA plugin.

When Chromium OS is upgraded (current version: $CROS_VER), the forwarding may
break as cras is sometimes not compatible across versions. If this happens,
you need to reinstall the audio target.
"
fi
