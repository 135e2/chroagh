#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# This adds support for Chromebook keyboard special keys.
#
# For example, we map Search+arrows to Page Up/Down/Home/End. This is
# done at the browser level in Chrome OS (i.e., not at the hardware
# or keymap level).
#
# We do this by adding an overlay.
#
# We are loading the symbols chromebook(overlay_before) before the
# layout is loaded. This is to make sure that the Search+. always
# maps to Insert, but allowing the layout to change the mapping
# of that key if necessary.
#
# Finally, chromebook(overlay_after) remaps <LWIN> (the Search key)
# to the overlay latch.
#
# An additional mapping is needed to make sure that Super_R is not
# sent when the Search key is released (this is a little strange,
# and I'm not sure why this happens).

REQUIRES='x11'
DESCRIPTION='Adds support for Chromebook keyboard special keys.'
. "${TARGETSDIR:="$PWD"}/common"

### Append to prepare.sh:
# Make sure we start from a fresh package
apt-mark unhold xkb-data || true 2>/dev/null
apt-get -y install --reinstall xkb-data

XKBROOT='/usr/share/X11/xkb'
XKBROOTTMP="`mktemp -d crouton-xkb.XXXXXX --tmpdir=/tmp`"
TRAP="rm -rf '$XKBROOTTMP';$TRAP"
trap "$TRAP" INT HUP 0
mkdir -p "$XKBROOTTMP/compat" "$XKBROOTTMP/symbols" "$XKBROOTTMP/rules"

cat > "$XKBROOTTMP/compat/chromebook" <<END
// Overlay1_Enable is a latch key for overlay1

default partial xkb_compatibility "overlay"  {
    interpret Overlay1_Enable+AnyOfOrNone(all) {
        action= SetControls(controls=Overlay1);
    };
};
END

cat > "$XKBROOTTMP/symbols/chromebook" <<END
// Keys that need to be overridden before the layout is
// loaded. This makes sure that Search+. maps to Insert,
// no matter what the "." key is mapped to.
partial alphanumeric_keys
xkb_symbols "overlay_before" {
    key <AB09> { [ period, greater ], overlay1=<INS> };

    key <LEFT> { [ Left, Left ], overlay1=<HOME> };
    key <RGHT> { [ Right, Right ], overlay1=<END> };
    key <UP>   { [ Up, Up ], overlay1=<PGUP> };
    key <DOWN> { [ Down, Down ], overlay1=<PGDN> };

    key <BKSP> { [ BackSpace, BackSpace ], overlay1=<DELE> };

    key <LALT> { [ Alt_L, Meta_L ], overlay1=<CAPS> };
    key <RALT> { [ Alt_R, Meta_R ], overlay1=<CAPS> };

    // For some strange reason, some Super_R events are triggered when
    // the Search key is release (i.e. with overlay on).
    // This maps RWIN to a dummy key (<I253>), to make sure we catch it.
    key <RWIN> { [ NoSymbol ], overlay1=<I253> };
};

// Keys that we want to override after the layout is loaded
partial
xkb_symbols "overlay_after" {
    key <LWIN> { [ Overlay1_Enable ], overlay1=<LWIN> };
    // Map dummy key to no symbol
    key <I253> { [ NoSymbol ] };
};
END

awk '
# default: print line
1

# rules/base.ml_s.part
/^! model[ \t]*layout[ \t]*=[ \t]*symbols$/{
    found[1]++;
    print "  chromebook	*			=	pc+chromebook(overlay_before)+%l%(v)"
}

# rules/base.ml1_c.part
/^! model[ \t]*layout\[1\][ \t]*=[ \t]*compat$/{
    found[2]++;
    print "  chromebook	*		=	complete+chromebook"
}

# rules/base.ml1_s.part
/^! model[ \t]*layout\[1\][ \t]*=[ \t]*symbols$/{
    found[3]++;
    print "  chromebook	*			=	pc+chromebook(overlay_before)+%l[1]%(v[1])"
}

# rules/base.ml_c.part
/^! model[ \t]*layout[ \t]*=[ \t]*compat$/{
    found[4]++;
    print "  chromebook	*		=	complete+chromebook"
}

# rules/evdev.m_s.part
/^! model[ \t]*=[ \t]*symbols$/{
    found[5]++;
    print "  chromebook	=   +inet(evdev)+chromebook(overlay_after)"
}

END {
    for (i = 1; i <= 5; i++) {
        if (found[i] != 1) {
            print "Error: " FILENAME ": rule " i ": applied " found[i] " times" > "/dev/stderr"
            exit 1
        }
    }
}
' "$XKBROOT/rules/evdev" > "$XKBROOTTMP/rules/evdev"

# rules/base.xml.in
awk '
# default: print line
1

/^.*<modelList>$/{
    found++;
    print "    <model>";
    print "      <configItem>";
    print "        <name>chromebook</name>";
    print "        <description>Chromebook</description>";
    print "        <vendor>Google</vendor>";
    print "      </configItem>";
    print "    </model>"
}

END {
    if (found != 1) {
        print "Error: " FILENAME ": rule applied " found " times" > "/dev/stderr"
        exit 1
    }
}
' "$XKBROOT/rules/evdev.xml" > "$XKBROOTTMP/rules/evdev.xml"

awk '
# default: print line
1

/^! model$/{
    found++;
    print "  chromebook      Chromebook"
}

END {
    if (found != 1) {
        print "Error: " FILENAME ": rule applied " found " times" > "/dev/stderr"
        exit 1
    }
}
' "$XKBROOT/rules/evdev.lst" > "$XKBROOTTMP/rules/evdev.lst"

cp -a "$XKBROOTTMP"/* "$XKBROOT"/

# Hold xkb-data, so that it does not get updated
apt-mark hold xkb-data
